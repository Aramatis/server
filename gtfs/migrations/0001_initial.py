# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-11-17 18:39
from __future__ import unicode_literals

from django.db import migrations, models

import django.db.models.deletion


def update_contentypes(apps, schema_editor):
    """
    Updates content types.
    We want to have the same content type id, when the model is moved and renamed.
    """
    try:
        ContentType = apps.get_model('contenttypes', 'ContentType')
        db_alias = schema_editor.connection.alias

        # Move the 'a' model to gtfs app and rename to 'b'
        ContentType.objects.using(db_alias).filter(app_label='AndroidRequests', model='busstop'). \
            update(app_label='gtfs')
        ContentType.objects.using(db_alias).filter(app_label='AndroidRequests', model='servicesbybusstop'). \
            update(app_label='gtfs')
        ContentType.objects.using(db_alias).filter(app_label='AndroidRequests', model='service'). \
            update(app_label='gtfs')
        ContentType.objects.using(db_alias).filter(app_label='AndroidRequests', model='servicelocation'). \
            update(app_label='gtfs')
        ContentType.objects.using(db_alias).filter(app_label='AndroidRequests', model='servicestopdistance'). \
            update(app_label='gtfs')
        ContentType.objects.using(db_alias).filter(app_label='AndroidRequests', model='route'). \
            update(app_label='gtfs')
        ContentType.objects.using(db_alias).filter(app_label='AndroidRequests', model='gtfs'). \
            update(app_label='gtfs')
    except LookupError:
        pass


def update_contentypes_reverse(apps, schema_editor):
    """
    Reverts changes in content types.
    """
    try:
        ContentType = apps.get_model('contenttypes', 'ContentType')
        db_alias = schema_editor.connection.alias

        # Move the 'a' model to gtfs app and rename to 'b'
        ContentType.objects.using(db_alias).filter(app_label='gtfs', model='busstop'). \
            update(app_label='AndroidRequests')
        ContentType.objects.using(db_alias).filter(app_label='gtfs', model='servicesbybusstop'). \
            update(app_label='AndroidRequests')
        ContentType.objects.using(db_alias).filter(app_label='gtfs', model='service'). \
            update(app_label='AndroidRequests')
        ContentType.objects.using(db_alias).filter(app_label='gtfs', model='servicelocation'). \
            update(app_label='AndroidRequests')
        ContentType.objects.using(db_alias).filter(app_label='gtfs', model='servicestopdistance'). \
            update(app_label='AndroidRequests')
        ContentType.objects.using(db_alias).filter(app_label='gtfs', model='route'). \
            update(app_label='AndroidRequests')
        ContentType.objects.using(db_alias).filter(app_label='gtfs', model='gtfs'). \
            update(app_label='AndroidRequests')
    except LookupError:
        pass


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('AndroidRequests', '0043_auto_20171117_1539')
    ]

    state_operations = [
        migrations.CreateModel(
            name='BusStop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('code', models.CharField(max_length=6, verbose_name='Code')),
                ('name', models.CharField(max_length=70, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='GTFS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(default=None, max_length=10, unique=True)),
                ('timeCreation', models.DateTimeField(null=True, verbose_name='Time Creation')),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('serviceCode', models.CharField(db_index=True, max_length=11)),
                ('sequence', models.IntegerField(verbose_name='Sequence')),
                ('gtfs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.GTFS',
                                           verbose_name='gtfs version')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(max_length=11, verbose_name='Service')),
                ('origin', models.CharField(max_length=100)),
                ('destiny', models.CharField(max_length=100)),
                ('color', models.CharField(default='#00a0f0', max_length=7)),
                ('color_id', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('service', models.CharField(max_length=11, verbose_name='Service Code')),
                ('distance', models.IntegerField(verbose_name='Route Distance')),
                ('gtfs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.GTFS',
                                           verbose_name='gtfs version')),
            ],
        ),
        migrations.CreateModel(
            name='ServicesByBusStop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=11)),
                ('busStop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.BusStop',
                                              verbose_name='the busStop')),
                ('gtfs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.GTFS',
                                           verbose_name='gtfs version')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.Service',
                                              verbose_name='the service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceStopDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(max_length=11, verbose_name='Service Code')),
                ('distance', models.IntegerField(verbose_name='Distance Traveled')),
                ('busStop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.BusStop',
                                              verbose_name='Bus Stop')),
                ('gtfs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.GTFS',
                                           verbose_name='gtfs version')),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='busStops',
            field=models.ManyToManyField(through='gtfs.ServicesByBusStop', to='gtfs.BusStop', verbose_name='Bus Stops'),
        ),
        migrations.AddField(
            model_name='service',
            name='gtfs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.GTFS',
                                    verbose_name='gtfs version'),
        ),
        migrations.AddField(
            model_name='busstop',
            name='gtfs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gtfs.GTFS',
                                    verbose_name='gtfs version'),
        ),
        migrations.AlterUniqueTogether(
            name='servicestopdistance',
            unique_together=set([('busStop', 'service', 'gtfs')]),
        ),
        migrations.AlterUniqueTogether(
            name='servicesbybusstop',
            unique_together=set([('code', 'busStop', 'gtfs')]),
        ),
        migrations.AlterUniqueTogether(
            name='servicelocation',
            unique_together=set([('service', 'distance', 'gtfs')]),
        ),
        migrations.AlterIndexTogether(
            name='servicelocation',
            index_together=set([('service', 'distance')]),
        ),
        migrations.AlterUniqueTogether(
            name='service',
            unique_together=set([('service', 'gtfs')]),
        ),
        migrations.AlterUniqueTogether(
            name='route',
            unique_together=set([('serviceCode', 'sequence', 'gtfs')]),
        ),
        migrations.AlterUniqueTogether(
            name='busstop',
            unique_together=set([('code', 'gtfs')]),
        ),
    ]

    database_operations = [
        migrations.RunPython(update_contentypes, update_contentypes_reverse),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=state_operations,
            database_operations=database_operations
        ),
    ]
