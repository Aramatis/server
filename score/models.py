from django.db import models

import uuid

# Create your models here.

class Level(models.Model):
    ''' user level '''
    name = models.CharField(max_length=50, null=False, blank=False)
    ''' level name '''
    minScore = models.FloatField(default=0, null=False)
    ''' minimun score to keep the level '''
    position = models.IntegerField(null=False, unique=True)
    ''' to order levels 1,2,3,... '''


class TranSappUser(models.Model):
    ''' user logged with social network (Facebook, google) '''
    userId = models.CharField(max_length=128, null=False, blank=False)
    ''' user id given by social network(FacebookUserId or ) '''
    name = models.CharField(max_length=50, null=False, blank=False)
    ''' user name '''
    email = models.EmailField(null=False)
    ''' user email'''
    phoneId = models.UUIDField(null=False)
    ''' phone id used to log in '''
    FACEBOOK = 'FACEBOOK'
    GOOGLE = 'GOOGLE'
    ACCOUNT_TYPES=(
        (FACEBOOK, 'Facebook'),
        (GOOGLE, 'Google')
    )
    accountType = models.CharField(max_length=10, choices=ACCOUNT_TYPES, null=False)
    ''' type of toke id (it says where tokenID comes from) '''
    globalScore = models.FloatField(default=0, null=False)
    ''' global score generated by user interactions '''
    level = models.ForeignKey(Level, default=1)
    ''' level based on score '''
    sessionToken = models.UUIDField(default=uuid.uuid4)
    ''' uuid generated each time the user log in '''


class ScoreEvent(models.Model):
    ''' score given by action '''
    code = models.CharField(max_length=10, null=False, blank=False)
    ''' event code '''
    score = models.FloatField(default=0, null=False)
    ''' score given to user when he does the action associated to code '''


class ScoreHistory(models.Model):
    ''' history of events give score'''
    tranSappUser = models.ForeignKey(TranSappUser)
    ''' user '''
    scoreEvent = models.ForeignKey(ScoreEvent)
    ''' event that generates the score '''
    timeCreation = models.DateTimeField(null=False)
    ''' time when event was generated '''
    score = models.FloatField(default=0, null=False)
    ''' winned score '''
    meta = models.CharField(max_length=100, null=True)
    ''' addional data to score '''
